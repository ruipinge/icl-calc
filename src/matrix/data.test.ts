import { DataPoint, mapRowsToDataPoint } from '../db';
import {
  LENS_SIZES,
  MYOPIA_LEVELS,
  MatrixFilter,
  filterFlatRows,
  getDataPoints
} from './data';

// prettier-ignore
const dataPoints: DataPoint[] = mapRowsToDataPoint([
    //[Age, ICLSize, ICLSE,  ACD, CCT,  ACQ,   ATA,   CLR, pre-op ACA nasal, pre-op ACA Temp, Ave Pre-op ACA nasal, vault, post-op ACA nasal, post-op ACA Temp, Ave Post-op ACA nasal,  WTW, Keratometry, gender]
      [ 23,    12.6,    -5, 4.02, 610, 3.41, 11.72, -0.08,             44.9,            49.2,                47.05,   1.1,              18.9,             24.4,                 21.65, 11.3,       44.35,      0],
      [ 23,    12.6,    -5, 4.02, 610, 3.41, 11.72, -0.08,             44.9,            49.2,                47.05,   1.2,              18.9,             24.4,                 21.65, 11.3,       44.35,      0],
      [ 23,    12.6,    -5, 4.02, 610, 3.41, 11.72, -0.08,             44.9,            49.2,                47.05,   1.3,              18.9,             24.4,                 21.65, 11.3,       44.35,      0],
      [ 23,    12.6,   -11, 4.02, 610, 3.41, 11.72, -0.08,             44.9,            49.2,                47.05,   1.4,              18.9,             24.4,                 21.65, 11.3,       44.35,      0],
      [ 23,    12.6,   -11, 4.02, 610, 3.41, 11.72, -0.08,             44.9,            49.2,                47.05,   1.5,              18.9,             24.4,                 21.65, 11.3,       44.35,      0],
      [ 23,    12.6,   -11, 4.02, 610, 3.41, 11.72, -0.08,             44.9,            49.2,                47.05,   1.6,              18.9,             24.4,                 21.65, 11.3,       44.35,      0],
      [ 23,    12.6,   -13, 4.02, 610, 3.41, 11.72, -0.08,             44.9,            49.2,                47.05,   1.7,              18.9,             24.4,                 21.65, 11.3,       44.35,      0],
      [ 23,    12.6,   -13, 4.02, 610, 3.41, 11.72, -0.08,             44.9,            49.2,                47.05,   1.8,              18.9,             24.4,                 21.65, 11.3,       44.35,      0],
      [ 23,    12.6,   -13, 4.02, 610, 3.41, 11.72, -0.08,             44.9,            49.2,                47.05,   1.9,              18.9,             24.4,                 21.65, 11.3,       44.35,      0],
      [ 23,    13.2,    -5, 4.02, 610, 3.41, 11.72, -0.08,             44.9,            49.2,                47.05,   2.0,              18.9,             24.4,                 21.65, 11.3,       44.35,      0],
      [ 23,    13.2,    -5, 4.02, 610, 3.41, 11.72, -0.08,             44.9,            49.2,                47.05,   2.1,              18.9,             24.4,                 21.65, 11.3,       44.35,      0],
      [ 23,    13.2,    -5, 4.02, 610, 3.41, 11.72, -0.08,             44.9,            49.2,                47.05,   2.2,              18.9,             24.4,                 21.65, 11.3,       44.35,      0],
      [ 23,    13.2,   -11, 4.02, 610, 3.41, 11.72, -0.08,             44.9,            49.2,                47.05,   2.3,              18.9,             24.4,                 21.65, 11.3,       44.35,      0],
      [ 23,    13.2,   -11, 4.02, 610, 3.41, 11.72, -0.08,             44.9,            49.2,                47.05,   2.4,              18.9,             24.4,                 21.65, 11.3,       44.35,      0],
      [ 23,    13.2,   -11, 4.02, 610, 3.41, 11.72, -0.08,             44.9,            49.2,                47.05,   2.5,              18.9,             24.4,                 21.65, 11.3,       44.35,      0],
      [ 23,    13.2,   -13, 4.02, 610, 3.41, 11.72, -0.08,             44.9,            49.2,                47.05,   2.6,              18.9,             24.4,                 21.65, 11.3,       44.35,      0],
      [ 23,    13.2,   -13, 4.02, 610, 3.41, 11.72, -0.08,             44.9,            49.2,                47.05,   2.7,              18.9,             24.4,                 21.65, 11.3,       44.35,      0],
      [ 23,    13.2,   -13, 4.02, 610, 3.41, 11.72, -0.08,             44.9,            49.2,                47.05,   2.8,              18.9,             24.4,                 21.65, 11.3,       44.35,      0],
      [ 23,    13.7,    -5, 4.02, 610, 3.41, 11.72, -0.08,             44.9,            49.2,                47.05,   2.9,              18.9,             24.4,                 21.65, 11.3,       44.35,      0],
      [ 23,    13.7,    -5, 4.02, 610, 3.41, 11.72, -0.08,             44.9,            49.2,                47.05,   3.0,              18.9,             24.4,                 21.65, 11.3,       44.35,      0],
      [ 23,    13.7,    -5, 4.02, 610, 3.41, 11.72, -0.08,             44.9,            49.2,                47.05,   3.1,              18.9,             24.4,                 21.65, 11.3,       44.35,      0],
      [ 23,    13.7,   -11, 4.02, 610, 3.41, 11.72, -0.08,             44.9,            49.2,                47.05,   3.2,              18.9,             24.4,                 21.65, 11.3,       44.35,      0],
      [ 23,    13.7,   -11, 4.02, 610, 3.41, 11.72, -0.08,             44.9,            49.2,                47.05,   3.3,              18.9,             24.4,                 21.65, 11.3,       44.35,      0],
      [ 23,    13.7,   -11, 4.02, 610, 3.41, 11.72, -0.08,             44.9,            49.2,                47.05,   3.4,              18.9,             24.4,                 21.65, 11.3,       44.35,      0],
      [ 23,    13.7,   -13, 4.02, 610, 3.41, 11.72, -0.08,             44.9,            49.2,                47.05,   3.5,              18.9,             24.4,                 21.65, 11.3,       44.35,      0],
      [ 23,    13.7,   -13, 4.02, 610, 3.41, 11.72, -0.08,             44.9,            49.2,                47.05,   3.6,              18.9,             24.4,                 21.65, 11.3,       44.35,      0],
      [ 23,    13.7,   -13, 4.02, 610, 3.41, 11.72, -0.08,             44.9,            49.2,                47.05,   3.7,              18.9,             24.4,                 21.65, 11.3,       44.35,      0],
      // Excluded Lens Size
      [ 23,    13.6,   -13, 4.02, 610, 3.41, 11.72, -0.08,             44.9,            49.2,                47.05,   3.7,              18.9,             24.4,                 21.65, 11.3,       44.35,      0],
      // Excluded ATA
      [ 23,    13.6,   -13, 4.02, 610, 3.41, 11.81, -0.08,             44.9,            49.2,                47.05,   3.7,              18.9,             24.4,                 21.65, 11.3,       44.35,      0],
      [ 23,    13.6,   -13, 4.02, 610, 3.41, 11.59, -0.08,             44.9,            49.2,                47.05,   3.7,              18.9,             24.4,                 21.65, 11.3,       44.35,      0],
      // Excluded CLR
      [ 23,    13.6,   -13, 4.02, 610, 3.41, 11.72, -0.1001,           44.9,            49.2,                47.05,   3.7,              18.9,             24.4,                 21.65, 11.3,       44.35,      0],
      [ 23,    13.6,   -13, 4.02, 610, 3.41, 11.72,  0.1001,           44.9,            49.2,                47.05,   3.7,              18.9,             24.4,                 21.65, 11.3,       44.35,      0],
    ]);

export const FILTER: MatrixFilter = {
  ata: 11.7,
  clr: 0,
  dataPoints: dataPoints
};

it('filter mocked data points', () => {
  const flatRows = filterFlatRows(FILTER);
  expect(flatRows.length).toBe(9);
  flatRows.forEach((points) => expect(points.length).toBe(3));
});

it('filter real data points', () => {
  const flatRows = filterFlatRows({
    ata: 11.7,
    clr: 0
  });
  expect(flatRows.length).toBe(9);

  expect(flatRows[0].length).toBe(0);
  expect(flatRows[1].length).toBe(2);
  expect(flatRows[2].length).toBe(5);
  expect(flatRows[3].length).toBe(0);
  expect(flatRows[4].length).toBe(7);
  expect(flatRows[5].length).toBe(5);
  expect(flatRows[6].length).toBe(0);
  expect(flatRows[7].length).toBe(0);
  expect(flatRows[8].length).toBe(0);
});

it('filter real data points for Lens and Myopia', () => {
  const points = getDataPoints({
    lens: LENS_SIZES[0],
    myopia: MYOPIA_LEVELS[0]
  });
  expect(points.length).toBe(5);
});
