{"version":3,"sources":["FieldWithUnit.tsx","ICLSchema.ts","formulas.ts","Form.tsx","FormContainer.tsx","App.tsx","index.tsx"],"names":["FieldWithUnit","label","name","unit","unitTitle","placeholder","error","value","disabled","className","htmlFor","type","autoComplete","title","component","INVALID_ERROR","REQUIRED_ERROR","ICLSchema","Yup","shape","patient","dateOfBirth","min","max","required","biometrics","ata","wtw","clr","acq","acan","acat","kf","cct","spectacleRefraction","sphere","cylindre","axis","vertex","round","val","decimals","Math","pow","calcPosMeridian","calcNegMeridian","calcIclCylindre","posMer","negMer","calcIclCylindreEquivalent","negCylindre","PingeForm","initialValues","setStatus","validationSchema","onSubmit","values","setSubmitting","setTimeout","alert","JSON","stringify","isSubmitting","errors","touched","id","automcomplete","as","style","display","renderICLPower","param1","FormContainer","Navbar","bg","variant","fixed","Container","Brand","href","Nav","Form","inline","Button","age","eye","App","ReactDOM","render","document","getElementById"],"mappings":"yNAeaA,EAA8C,SAAC,GASrD,IARLC,EAQI,EARJA,MACAC,EAOI,EAPJA,KACAC,EAMI,EANJA,KACAC,EAKI,EALJA,UACAC,EAII,EAJJA,YACAC,EAGI,EAHJA,MACAC,EAEI,EAFJA,MACAC,EACI,EADJA,SAEA,OACE,sBAAKC,UAAW,iBAAhB,UACE,uBAAOC,QAASR,EAAO,QAASO,UAAU,0BAA1C,SACGR,IAEH,qBAAKQ,UAAU,WAAf,SACE,sBAAKA,UAAU,cAAf,UACGD,EACC,uBACEN,KAAMA,EACNK,MAAOA,EACPE,UAAW,0BACXD,UAAU,IAGZ,cAAC,IAAD,CACEG,KAAK,SACLT,KAAMA,EACNO,WACGH,EAAQ,aAAe,IAAM,2BAEhCD,YAAaA,EACbO,aAAa,QAGhBT,EACC,qBAAKM,UAAU,qBAAf,SACE,sBAAMA,UAAU,mBAAmBI,MAAOT,EAA1C,SACGD,MAGH,KACJ,cAAC,IAAD,CACED,KAAMA,EACNY,UAAU,MACVL,UAAU,8B,OC1DhBM,EAAgB,iBAChBC,EAAiB,kBAEVC,EAAYC,MAAaC,MAAM,CAC1CC,QAASF,MAAaC,MAAM,CAE1BE,YAAaH,MACVI,IAAI,EAAG,cACPC,IAAI,GAAI,aACRC,SAAS,cAEdC,WAAYP,MAAaC,MAAM,CAC7BO,IAAKR,MACFM,SAASR,GACTM,IAAI,EAAGP,GACPQ,IAAI,GAAIR,GACXY,IAAKT,MACFM,SAASR,GACTM,IAAI,EAAGP,GACPQ,IAAI,GAAIR,GACXa,IAAKV,MACFM,SAASR,GACTM,KAAK,IAAMP,GACXQ,IAAI,IAAMR,GACbc,IAAKX,MACFM,SAASR,GACTM,IAAI,IAAKP,GACTQ,IAAI,EAAKR,GACZe,KAAMZ,MACHM,SAASR,GACTM,IAAI,EAAGP,GACPQ,IAAI,GAAIR,GACXgB,KAAMb,MACHM,SAASR,GACTM,IAAI,EAAGP,GACPQ,IAAI,GAAIR,GACXiB,GAAId,MACDM,SAASR,GACTM,IAAI,GAAIP,GACRQ,IAAI,GAAIR,GACXkB,IAAKf,MACFM,SAASR,GACTM,IAAI,IAAKP,GACTQ,IAAI,IAAKR,KAEdmB,oBAAqBhB,MAAaC,MAAM,CACtCgB,OAAQjB,MACLM,SAASR,GACTM,KAAK,GAAIP,GACTQ,IAAI,EAAGR,GACVqB,SAAUlB,MACPM,SAASR,GACTM,KAAK,EAAGP,GACRQ,IAAI,EAAGR,GACVsB,KAAMnB,MACHM,SAASR,GACTM,IAAI,EAAGP,GACPQ,IAAI,IAAKR,GACZuB,OAAQpB,MACLM,SAASR,GACTM,IAAI,EAAGP,GACPQ,IAAI,GAAIR,OC/DTwB,EAAQ,SAACC,GAAD,IAAcC,EAAd,uDAAiC,EAAjC,OACZC,KAAKH,MAAMC,EAAME,KAAKC,IAAI,GAAIF,IAAaC,KAAKC,IAAI,GAAIF,IAEpDG,EAAkB,SAACT,GACvB,MAAkB,MAASA,EAAnB,SAGJU,EAAkB,SAACV,EAAgBC,GACvC,MAAkB,OAAUD,EAASC,GAA7B,SAOGU,EAAkB,SAACX,EAAgBC,GAC9C,IAAMW,EAASH,EAAgBT,GAC7Ba,EAASH,EAAgBV,EAAQC,GAEnC,OAAOG,EAAMQ,EAASC,IAeXC,EAA4B,SAACd,EAAgBC,GACxD,IAAMc,EACJL,EAAgBV,EAAQC,GAAYQ,EAAgBT,GACtD,OAAOI,EAAMK,EAAgBT,GAAUe,EAAc,ICW1CC,EAAsC,SAAC,GAG7C,IAFLC,EAEI,EAFJA,cAEI,EADJC,UAEA,OACE,8BACE,cAAC,IAAD,CACED,cAAeA,EACfE,iBAAkBrC,EAClBsC,SAAU,SAACC,EAAD,GAAgC,IAArBC,EAAoB,EAApBA,cACnBC,YAAW,WACTC,MAAMC,KAAKC,UAAUL,EAAQ,KAAM,IACnCC,GAAc,KACb,MAPP,SAUG,4CD1CmBpB,EAXEF,EAAgBC,ECqDlC0B,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,OAAQC,EAAzB,EAAyBA,QAASR,EAAlC,EAAkCA,OAAlC,OACC,eAAC,IAAD,WACE,yCACA,sBAAK/C,UAAU,WAAf,UACE,sBAAKA,UAAU,sBAAf,UACE,uBAAOC,QAAQ,YAAf,kBACA,cAAC,IAAD,CACER,KAAK,eACLO,UAAU,eACVwD,GAAG,YACH5D,YAAY,qBACZO,aAAa,WAGjB,sBAAKH,UAAU,kCAAf,UACE,uBAAOC,QAAQ,mBAAf,2BACA,cAAC,IAAD,CACER,KAAK,sBACLO,UAAU,eACVwD,GAAG,mBACH5D,YAAY,aACZ6D,cAAc,WAGlB,sBAAKzD,UAAU,kCAAf,UACE,uBAAOC,QAAQ,WAAf,iBACA,cAAC,IAAD,CACER,KAAK,cACLO,UAAU,eACVwD,GAAG,WACHC,cAAc,WAGlB,sBAAKzD,UAAU,kCAAf,UACE,uBAAOC,QAAQ,WAAf,iBACA,eAAC,IAAD,CACEyD,GAAG,SACHjE,KAAK,MACLO,UAAU,eACVwD,GAAG,WACHC,cAAc,MALhB,UAOE,wBAAQ3D,MAAM,GAAd,uBACA,wBAAQA,MAAM,OAAd,kBACA,wBAAQA,MAAM,QAAd,6BAIL,UAAAwD,EAAO3C,eAAP,eAAgBlB,QAAhB,UAAwB8D,EAAQ5C,eAAhC,aAAwB,EAAiBlB,MACxC,8BAAM6D,EAAO3C,QAAQlB,OACnB,KACJ,cAAC,IAAD,CAAcA,KAAK,OAAOY,UAAU,QACpC,wBACC,EACD,wBACEH,KAAK,SACLH,SAAUsD,EACVM,MAAO,CAAEC,QAAS,QAHpB,oBAOA,sBAAK5D,UAAU,WAAf,UACE,sBAAKA,UAAU,WAAf,UACE,4CACA,cAAC,EAAD,CACER,MAAM,uBACNC,KAAK,iBACLC,KAAK,KACLG,MAAK,UAAEyD,EAAOtC,kBAAT,aAAE,EAAmBC,MAE5B,cAAC,EAAD,CACEzB,MAAM,uBACNC,KAAK,iBACLC,KAAK,KACLC,UAAU,cACVE,MAAK,UAAEyD,EAAOtC,kBAAT,aAAE,EAAmBE,MAE5B,cAAC,EAAD,CACE1B,MAAM,6BACNC,KAAK,iBACLC,KAAK,KACLC,UAAU,aACVE,MAAK,UAAEyD,EAAOtC,kBAAT,aAAE,EAAmBG,MAE5B,cAAC,EAAD,CACE3B,MAAM,wCACNC,KAAK,iBACLC,KAAK,KACLC,UAAU,cACVE,MAAK,UAAEyD,EAAOtC,kBAAT,aAAE,EAAmBI,MAE5B,cAAC,EAAD,CACE5B,MAAM,sCACNC,KAAK,kBACLC,KAAK,OACLC,UAAU,UACVE,MAAK,UAAEyD,EAAOtC,kBAAT,aAAE,EAAmBK,OAE5B,cAAC,EAAD,CACE7B,MAAM,yCACNC,KAAK,kBACLC,KAAK,OACLC,UAAU,UACVE,MAAK,UAAEyD,EAAOtC,kBAAT,aAAE,EAAmBM,OAE5B,cAAC,EAAD,CACE9B,MAAM,mCACNC,KAAK,gBACLC,KAAK,MACLC,UAAU,WACVE,MAAK,UAAEyD,EAAOtC,kBAAT,aAAE,EAAmBO,KAE5B,cAAC,EAAD,CACE/B,MAAM,kCACNC,KAAK,iBACLC,KAAK,UACLC,UAAU,cACVE,MAAK,UAAEyD,EAAOtC,kBAAT,aAAE,EAAmBQ,SAG9B,sBAAKxB,UAAU,uBAAf,UACE,sDACA,cAAC,EAAD,CACER,MAAM,SACNC,KAAK,6BACLC,KAAK,MACLC,UAAU,WACVE,MAAK,UAAEyD,EAAO7B,2BAAT,aAAE,EAA4BC,SAErC,cAAC,EAAD,CACElC,MAAM,WACNC,KAAK,+BACLC,KAAK,MACLC,UAAU,WACVE,MAAK,UAAEyD,EAAO7B,2BAAT,aAAE,EAA4BE,WAErC,cAAC,EAAD,CACEnC,MAAM,OACNC,KAAK,2BACLC,KAAK,OACLC,UAAU,UACVE,MAAK,UAAEyD,EAAO7B,2BAAT,aAAE,EAA4BG,OAErC,cAAC,EAAD,CACEpC,MAAM,SACNC,KAAK,6BACLC,KAAK,KACLC,UAAU,cACVE,MAAK,UAAEyD,EAAO7B,2BAAT,aAAE,EAA4BI,YAGvC,sBAAK7B,UAAU,uBAAf,UACE,2CACA,cAAC,EAAD,CACER,MAAM,SACNC,KAAK,YACLK,ODjNY4B,ECkNVqB,EAAOtB,oBAAoBC,ODlNDC,ECmN1BoB,EAAOtB,oBAAoBE,SDlNtCG,EAAMM,EAAgBV,EAAQC,KCoNrBjC,KAAK,MACLC,UAAU,WACVI,UAAU,IAEZ,cAAC,EAAD,CACEP,MAAM,WACNC,KAAK,cACLK,MAAOuC,EACLU,EAAOtB,oBAAoBC,OAC3BqB,EAAOtB,oBAAoBE,UAE7BjC,KAAK,MACLC,UAAU,WACVI,UAAU,IAEZ,cAAC,EAAD,CACEP,MAAM,OACNC,KAAK,UACLK,OD5NU8B,EC4NSmB,EAAOtB,oBAAoBG,KD3N1DA,GAAQ,GAAKA,EAAO,GACfA,EAAO,GAGZA,EAAO,IAAMA,GAAQ,IAChBA,EAAO,GAGTE,EAAMF,EAAM,ICoNHlC,KAAK,OACLC,UAAU,UACVI,UAAU,IAEZ,cAAC,EAAD,CACEP,MAAM,uBACNM,MAAO0C,EACLO,EAAOtB,oBAAoBC,OAC3BqB,EAAOtB,oBAAoBE,UAE7BlC,KAAK,yBACLC,KAAK,OACLC,UAAU,UACVI,UAAU,mBCtPtB8D,EAAiB,SAACC,GAAD,OAAqB,mDAAsBA,MAErDC,EAAgB,WA0B3B,OACE,qCACE,cAACC,EAAA,EAAD,CAAQC,GAAG,OAAOC,QAAQ,OAAOC,MAAM,MAAvC,SACE,eAACC,EAAA,EAAD,WACE,cAACJ,EAAA,EAAOK,MAAR,CAAcC,KAAK,IAAnB,2BACA,cAACC,EAAA,EAAD,CAAKvE,UAAU,YAKf,cAACwE,EAAA,EAAD,CAAMC,QAAM,EAAZ,SACE,cAACC,EAAA,EAAD,CAAQR,QAAQ,SAAhB,0BAIN,cAACE,EAAA,EAAD,UACE,cAAC,EAAD,CAAWzB,cAzCc,CAC7BhC,QAAS,CACPlB,KAAM,GACNkF,KAAM,EACN/D,YAAa,GACbgE,IAAK,QAEP5D,WAAY,CACVC,IAAK,EACLC,IAAK,EACLC,IAAK,EACLC,IAAK,EACLC,KAAM,EACNC,KAAM,EACNC,GAAI,EACJC,IAAK,GAEPC,oBAAqB,CACnBC,OAAQ,EACRC,SAAU,EACVC,KAAM,EACNC,OAAQ,IAoBmCe,UAAWiB,UClD7CgB,EAFH,kBAAM,cAAC,EAAD,K,OCIlBC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.b9b8c5a3.chunk.js","sourcesContent":["import * as React from 'react';\n\nimport { Field, ErrorMessage } from 'formik';\n\ninterface FieldWithUnitProps {\n  label: string;\n  name: string;\n  unit?: string;\n  unitTitle?: string;\n  placeholder?: string;\n  error?: string;\n  value?: number;\n  disabled?: boolean;\n}\n\nexport const FieldWithUnit: React.FC<FieldWithUnitProps> = ({\n  label,\n  name,\n  unit,\n  unitTitle,\n  placeholder,\n  error,\n  value,\n  disabled\n}) => {\n  return (\n    <div className={'form-group row'}>\n      <label htmlFor={name + 'field'} className=\"col-sm-6 col-form-label\">\n        {label}\n      </label>\n      <div className=\"col-sm-6\">\n        <div className=\"input-group\">\n          {disabled ? (\n            <input\n              name={name}\n              value={value}\n              className={'form-control text-right'}\n              disabled={true}\n            />\n          ) : (\n            <Field\n              type=\"number\"\n              name={name}\n              className={\n                (error ? 'is-invalid' : '') + ' form-control text-right'\n              }\n              placeholder={placeholder}\n              autoComplete=\"off\"\n            />\n          )}\n          {unit ? (\n            <div className=\"input-group-append\">\n              <span className=\"input-group-text\" title={unitTitle}>\n                {unit}\n              </span>\n            </div>\n          ) : null}\n          <ErrorMessage\n            name={name}\n            component=\"div\"\n            className=\"invalid-feedback\"\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n","import * as Yup from 'yup';\n\nconst INVALID_ERROR = 'Invalid value.';\nconst REQUIRED_ERROR = 'Required value.';\n\nexport const ICLSchema = Yup.object().shape({\n  patient: Yup.object().shape({\n    // TODO:\n    dateOfBirth: Yup.string()\n      .min(5, 'Too Short!')\n      .max(10, 'Too Long!')\n      .required('Required')\n  }),\n  biometrics: Yup.object().shape({\n    ata: Yup.number()\n      .required(REQUIRED_ERROR)\n      .min(0, INVALID_ERROR)\n      .max(20, INVALID_ERROR),\n    wtw: Yup.number()\n      .required(REQUIRED_ERROR)\n      .min(0, INVALID_ERROR)\n      .max(20, INVALID_ERROR),\n    clr: Yup.number()\n      .required(REQUIRED_ERROR)\n      .min(-1000, INVALID_ERROR)\n      .max(1000, INVALID_ERROR),\n    acq: Yup.number()\n      .required(REQUIRED_ERROR)\n      .min(2.7, INVALID_ERROR)\n      .max(6.0, INVALID_ERROR),\n    acan: Yup.number()\n      .required(REQUIRED_ERROR)\n      .min(0, INVALID_ERROR)\n      .max(70, INVALID_ERROR),\n    acat: Yup.number()\n      .required(REQUIRED_ERROR)\n      .min(0, INVALID_ERROR)\n      .max(70, INVALID_ERROR),\n    kf: Yup.number()\n      .required(REQUIRED_ERROR)\n      .min(20, INVALID_ERROR)\n      .max(70, INVALID_ERROR),\n    cct: Yup.number()\n      .required(REQUIRED_ERROR)\n      .min(300, INVALID_ERROR)\n      .max(700, INVALID_ERROR)\n  }),\n  spectacleRefraction: Yup.object().shape({\n    sphere: Yup.number()\n      .required(REQUIRED_ERROR)\n      .min(-25, INVALID_ERROR)\n      .max(0, INVALID_ERROR),\n    cylindre: Yup.number()\n      .required(REQUIRED_ERROR)\n      .min(-8, INVALID_ERROR)\n      .max(0, INVALID_ERROR),\n    axis: Yup.number()\n      .required(REQUIRED_ERROR)\n      .min(0, INVALID_ERROR)\n      .max(180, INVALID_ERROR),\n    vertex: Yup.number()\n      .required(REQUIRED_ERROR)\n      .min(0, INVALID_ERROR)\n      .max(20, INVALID_ERROR)\n  })\n});\n","const round = (val: number, decimals: number = 2) =>\n  Math.round(val * Math.pow(10, decimals)) / Math.pow(10, decimals);\n\nconst calcPosMeridian = (sphere: number) => {\n  return -1.33756 + 0.9446 * sphere;\n};\n\nconst calcNegMeridian = (sphere: number, cylindre: number) => {\n  return -1.33756 + 0.9446 * (sphere + cylindre);\n};\n\nexport const calcIclSphere = (sphere: number, cylindre: number) => {\n  return round(calcNegMeridian(sphere, cylindre));\n};\n\nexport const calcIclCylindre = (sphere: number, cylindre: number) => {\n  const posMer = calcPosMeridian(sphere),\n    negMer = calcNegMeridian(sphere, cylindre);\n\n  return round(posMer - negMer);\n};\n\nexport const calcIclAxis = (axis: number) => {\n  if (axis >= 0 && axis < 90) {\n    return axis + 90;\n  }\n\n  if (axis > 90 && axis <= 180) {\n    return axis - 90;\n  }\n\n  return round(axis, 1);\n};\n\nexport const calcIclCylindreEquivalent = (sphere: number, cylindre: number) => {\n  const negCylindre =\n    calcNegMeridian(sphere, cylindre) - calcPosMeridian(sphere);\n  return round(calcPosMeridian(sphere) + negCylindre / 2);\n};\n","import React from 'react';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\n\nimport { FieldWithUnit } from './FieldWithUnit';\nimport { ICLSchema } from './ICLSchema';\nimport {\n  calcIclSphere,\n  calcIclCylindre,\n  calcIclAxis,\n  calcIclCylindreEquivalent\n} from './formulas';\n\ninterface Biometrics {\n  ata: number;\n  wtw: number;\n  clr: number;\n  acq: number;\n  acan: number;\n  acat: number;\n  kf: number;\n  cct: number;\n}\n\ninterface SpectacleRefraction {\n  sphere: number;\n  cylindre: number;\n  axis: number;\n  vertex: number;\n}\n\ninterface Patient {\n  name: string;\n  age: number;\n  dateOfBirth: string;\n  eye: 'left' | 'right';\n}\n\nexport interface ICLForm {\n  patient: Patient;\n  biometrics: Biometrics;\n  spectacleRefraction: SpectacleRefraction;\n}\n\ninterface ContainerProps {\n  initialValues: ICLForm;\n  setStatus: (arg1: boolean) => void;\n}\n\nexport const PingeForm: React.FC<ContainerProps> = ({\n  initialValues,\n  setStatus\n}) => {\n  return (\n    <div>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={ICLSchema}\n        onSubmit={(values, { setSubmitting }) => {\n          setTimeout(() => {\n            alert(JSON.stringify(values, null, 2));\n            setSubmitting(false);\n          }, 400);\n        }}\n      >\n        {({ isSubmitting, errors, touched, values }) => (\n          <Form>\n            <h2>Patient</h2>\n            <div className=\"form-row\">\n              <div className=\"form-group col-md-4\">\n                <label htmlFor=\"fieldName\">Name</label>\n                <Field\n                  name=\"patient.name\"\n                  className=\"form-control\"\n                  id=\"fieldName\"\n                  placeholder=\"enter patient name\"\n                  autoComplete=\"off\"\n                />\n              </div>\n              <div className=\"form-group col-md-2 offset-md-1\">\n                <label htmlFor=\"fieldDateOfBirth\">Date of Birth</label>\n                <Field\n                  name=\"patient.dateOfBirth\"\n                  className=\"form-control\"\n                  id=\"fieldDateOfBirth\"\n                  placeholder=\"yyyy-mm-dd\"\n                  automcomplete=\"off\"\n                />\n              </div>\n              <div className=\"form-group col-md-1 offset-md-1\">\n                <label htmlFor=\"fieldAge\">Age</label>\n                <Field\n                  name=\"patient.age\"\n                  className=\"form-control\"\n                  id=\"fieldAge\"\n                  automcomplete=\"off\"\n                />\n              </div>\n              <div className=\"form-group col-md-2 offset-md-1\">\n                <label htmlFor=\"fieldEye\">Eye</label>\n                <Field\n                  as=\"select\"\n                  name=\"eye\"\n                  className=\"form-control\"\n                  id=\"fieldEye\"\n                  automcomplete=\"off\"\n                >\n                  <option value=\"\">Select...</option>\n                  <option value=\"left\">Left</option>\n                  <option value=\"right\">Right</option>\n                </Field>\n              </div>\n            </div>\n            {errors.patient?.name && touched.patient?.name ? (\n              <div>{errors.patient.name}</div>\n            ) : null}\n            <ErrorMessage name=\"name\" component=\"div\" />\n            <hr />\n            {false && setStatus && setStatus(true)}\n            <button\n              type=\"submit\"\n              disabled={isSubmitting}\n              style={{ display: 'none' }}\n            >\n              Submit\n            </button>\n            <div className=\"form-row\">\n              <div className=\"col-md-4\">\n                <h2>Biometrics</h2>\n                <FieldWithUnit\n                  label=\"Angle to Angle (AtA)\"\n                  name=\"biometrics.ata\"\n                  unit=\"mm\"\n                  error={errors.biometrics?.ata}\n                />\n                <FieldWithUnit\n                  label=\"White to White (WtW)\"\n                  name=\"biometrics.wtw\"\n                  unit=\"mm\"\n                  unitTitle=\"millimetres\"\n                  error={errors.biometrics?.wtw}\n                />\n                <FieldWithUnit\n                  label=\"Crystaline Lens Rise (CLR)\"\n                  name=\"biometrics.clr\"\n                  unit=\"nm\"\n                  unitTitle=\"nanometres\"\n                  error={errors.biometrics?.clr}\n                />\n                <FieldWithUnit\n                  label=\"Internal Anterior Chamber Depth (ACQ)\"\n                  name=\"biometrics.acq\"\n                  unit=\"mm\"\n                  unitTitle=\"millimetres\"\n                  error={errors.biometrics?.acq}\n                />\n                <FieldWithUnit\n                  label=\"Anterior Chamber Angle nasal (ACAn)\"\n                  name=\"biometrics.acan\"\n                  unit=\"º\"\n                  unitTitle=\"degrees\"\n                  error={errors.biometrics?.acan}\n                />\n                <FieldWithUnit\n                  label=\"Anterior Chamber Angle temporal (ACAt)\"\n                  name=\"biometrics.acat\"\n                  unit=\"º\"\n                  unitTitle=\"degrees\"\n                  error={errors.biometrics?.acat}\n                />\n                <FieldWithUnit\n                  label=\"Keratometry - Flat Meridian (Kf)\"\n                  name=\"biometrics.kf\"\n                  unit=\"dpt\"\n                  unitTitle=\"dioptres\"\n                  error={errors.biometrics?.kf}\n                />\n                <FieldWithUnit\n                  label=\"Central Corneal Thickness (CCT)\"\n                  name=\"biometrics.cct\"\n                  unit=\"μm\"\n                  unitTitle=\"micrometres\"\n                  error={errors.biometrics?.cct}\n                />\n              </div>\n              <div className=\"col-md-3 offset-md-1\">\n                <h2>Spectacle Refraction</h2>\n                <FieldWithUnit\n                  label=\"Sphere\"\n                  name=\"spectacleRefraction.sphere\"\n                  unit=\"dpt\"\n                  unitTitle=\"dioptres\"\n                  error={errors.spectacleRefraction?.sphere}\n                />\n                <FieldWithUnit\n                  label=\"Cylindre\"\n                  name=\"spectacleRefraction.cylindre\"\n                  unit=\"dpt\"\n                  unitTitle=\"dioptres\"\n                  error={errors.spectacleRefraction?.cylindre}\n                />\n                <FieldWithUnit\n                  label=\"Axis\"\n                  name=\"spectacleRefraction.axis\"\n                  unit=\"º\"\n                  unitTitle=\"degrees\"\n                  error={errors.spectacleRefraction?.axis}\n                />\n                <FieldWithUnit\n                  label=\"Vertex\"\n                  name=\"spectacleRefraction.vertex\"\n                  unit=\"mm\"\n                  unitTitle=\"millimetres\"\n                  error={errors.spectacleRefraction?.vertex}\n                />\n              </div>\n              <div className=\"col-md-3 offset-md-1\">\n                <h2>ICL Power</h2>\n                <FieldWithUnit\n                  label=\"Sphere\"\n                  name=\"iclSphere\"\n                  value={calcIclSphere(\n                    values.spectacleRefraction.sphere,\n                    values.spectacleRefraction.cylindre\n                  )}\n                  unit=\"dpt\"\n                  unitTitle=\"dioptres\"\n                  disabled={true}\n                />\n                <FieldWithUnit\n                  label=\"Cylindre\"\n                  name=\"iclCylindre\"\n                  value={calcIclCylindre(\n                    values.spectacleRefraction.sphere,\n                    values.spectacleRefraction.cylindre\n                  )}\n                  unit=\"dpt\"\n                  unitTitle=\"dioptres\"\n                  disabled={true}\n                />\n                <FieldWithUnit\n                  label=\"Axis\"\n                  name=\"iclAxis\"\n                  value={calcIclAxis(values.spectacleRefraction.axis)}\n                  unit=\"º\"\n                  unitTitle=\"degrees\"\n                  disabled={true}\n                />\n                <FieldWithUnit\n                  label=\"Spherical Equivalent\"\n                  value={calcIclCylindreEquivalent(\n                    values.spectacleRefraction.sphere,\n                    values.spectacleRefraction.cylindre\n                  )}\n                  name=\"iclSphericalEquivalent\"\n                  unit=\"º\"\n                  unitTitle=\"degrees\"\n                  disabled={true}\n                />\n              </div>\n            </div>\n          </Form>\n        )}\n      </Formik>\n    </div>\n  );\n};\n","import React from 'react';\n\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\nimport Container from 'react-bootstrap/Container';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\n\nimport { PingeForm, ICLForm } from './Form';\n\nconst renderICLPower = (param1: boolean) => <div>renderICLPower: {param1}</div>;\n\nexport const FormContainer = () => {\n  const initialValues: ICLForm = {\n    patient: {\n      name: '',\n      age: -1,\n      dateOfBirth: '',\n      eye: 'left'\n    },\n    biometrics: {\n      ata: 0,\n      wtw: 0,\n      clr: 0,\n      acq: 0,\n      acan: 0,\n      acat: 0,\n      kf: 0,\n      cct: 0\n    },\n    spectacleRefraction: {\n      sphere: 0,\n      cylindre: 0,\n      axis: 0,\n      vertex: 0\n    }\n  };\n\n  return (\n    <>\n      <Navbar bg=\"dark\" variant=\"dark\" fixed=\"top\">\n        <Container>\n          <Navbar.Brand href=\"#\">ICL Size Calc</Navbar.Brand>\n          <Nav className=\"mr-auto\">\n            {/*<Nav.Link href=\"#home\">Home</Nav.Link>\n          <Nav.Link href=\"#features\">Features</Nav.Link>\n          <Nav.Link href=\"#pricing\">Pricing</Nav.Link>*/}\n          </Nav>\n          <Form inline>\n            <Button variant=\"danger\">Reset</Button>\n          </Form>\n        </Container>\n      </Navbar>\n      <Container>\n        <PingeForm initialValues={initialValues} setStatus={renderICLPower} />\n      </Container>\n    </>\n  );\n};\n","import { FormContainer } from './FormContainer';\n\nconst App = () => <FormContainer />;\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport './App.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}