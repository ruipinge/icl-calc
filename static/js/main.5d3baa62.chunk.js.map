{"version":3,"sources":["util.ts","components/FieldWithUnit.tsx","ICLSchema.ts","formulas.ts","patient/PatientInfoFields.tsx","ICLForm.tsx","ICLContainer.tsx","App.tsx","index.tsx"],"names":["getClassName","error","touched","base","invalid","valid","join","UNITS","Map","UnitSufix","unit","className","title","get","FieldWithUnit","label","name","placeholder","value","disabled","htmlFor","type","autoComplete","component","INVALID_ERROR","REQUIRED_ERROR","ACQ_INVALID_ERROR","KF_INVALID_ERROR","CCT_INVALID_ERROR","SPHERE_INVALID_ERROR","CYLINDRE_INVALID_ERROR","ICLSchema","Yup","shape","patient","dateOfBirth","optional","typeError","biometrics","ata","required","min","max","wtw","clr","acq","acan","acat","kf","cct","spectacleRefraction","sphere","cylindre","axis","vertex","FACTOR0","FACTOR1","round","val","decimals","Math","pow","calcPosMeridian","calcNegMeridian","calcIclSphere","calcIclCylindre","posMer","negMer","calcIclCylindreEquivalent","negCylindre","calcAge","differenceInYears","Date","PatientInfoFields","errors","values","id","maxLength","as","ICLForm","initialValues","validationSchema","onSubmit","otherProps","ICLContainer","useState","setVal","href","onClick","state","eye","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5d3baa62.chunk.js","sourcesContent":["export const getClassName = ({\n  error,\n  touched,\n  base = ['form-control'],\n  invalid = ['is-invalid'],\n  valid = []\n}: {\n  error?: string;\n  touched?: boolean;\n  base?: Array<string>;\n  invalid?: Array<string>;\n  valid?: Array<string>;\n}): string => [...base, ...(error && touched ? invalid : valid)].join(' ');\n","import * as React from 'react';\n\nimport { Field, ErrorMessage } from 'formik';\nimport { getClassName } from '../util';\n\ntype Unit = 'mm' | 'nm' | 'º' | 'dpt' | 'μm';\n\nconst UNITS: Map<Unit, string> = new Map([\n  ['mm', 'millimetres'],\n  ['nm', 'nanometres'],\n  ['º', 'degrees'],\n  ['dpt', 'dioptres'],\n  ['μm', 'micrometres']\n]);\n\ninterface FieldWithUnitProps {\n  label: string;\n  name: string;\n  unit: Unit;\n  touched?: boolean;\n  placeholder?: string;\n  error?: string;\n  value?: number;\n  disabled?: boolean;\n}\n\nconst UnitSufix = ({ unit }: { unit: Unit }) => (\n  <div className=\"input-group-append\">\n    <span className=\"input-group-text\" title={UNITS.get(unit)}>\n      {unit}\n    </span>\n  </div>\n);\n\nexport const FieldWithUnit: React.FC<FieldWithUnitProps> = ({\n  label,\n  name,\n  unit,\n  placeholder,\n  error,\n  touched,\n  value,\n  disabled\n}) => {\n  return (\n    <div className={'form-group row'}>\n      <label htmlFor={name + 'field'} className=\"col-sm-6 col-form-label\">\n        {label}\n      </label>\n      <div className=\"col-sm-6\">\n        <div className=\"input-group\">\n          {disabled ? (\n            <input\n              name={name}\n              value={value}\n              className=\"form-control text-right\"\n              disabled={true}\n            />\n          ) : (\n            <Field\n              type=\"number\"\n              name={name}\n              className={getClassName({\n                error: error,\n                touched: touched,\n                base: ['form-control', 'text-right']\n              })}\n              placeholder={placeholder}\n              autoComplete=\"off\"\n            />\n          )}\n          <UnitSufix unit={unit} />\n          <ErrorMessage\n            name={name}\n            component=\"div\"\n            className=\"invalid-feedback\"\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n","import * as Yup from 'yup';\n\nconst ACQ_MIN = 2.7,\n  ACQ_MAX = 6.0,\n  KF_MIN = 20,\n  KF_MAX = 70,\n  CCT_MIN = 300,\n  CCT_MAX = 700,\n  SPHERE_MIN = -25,\n  SPHERE_MAX = 0,\n  CYLINDRE_MIN = -8,\n  CYLINDRE_MAX = 0,\n  INVALID_ERROR = 'Invalid value.',\n  REQUIRED_ERROR = 'Required value.',\n  ACQ_INVALID_ERROR = `${INVALID_ERROR} [${ACQ_MIN}, ${ACQ_MAX}]`,\n  KF_INVALID_ERROR = `${INVALID_ERROR} [${KF_MIN}, ${KF_MAX}]`,\n  CCT_INVALID_ERROR = `${INVALID_ERROR} [${CCT_MIN}, ${CCT_MAX}]`,\n  SPHERE_INVALID_ERROR = `${INVALID_ERROR} [${SPHERE_MIN}, ${SPHERE_MAX}]`,\n  CYLINDRE_INVALID_ERROR = `${INVALID_ERROR} [${CYLINDRE_MIN}, ${CYLINDRE_MAX}]`;\n\nexport const ICLSchema = Yup.object().shape({\n  patient: Yup.object().shape({\n    dateOfBirth: Yup.date().optional().typeError('Invalid date. (yyyy-mm-dd)')\n  }),\n  biometrics: Yup.object().shape({\n    ata: Yup.number()\n      .required(REQUIRED_ERROR)\n      .min(0, INVALID_ERROR)\n      .max(20, INVALID_ERROR),\n    wtw: Yup.number()\n      .required(REQUIRED_ERROR)\n      .min(0, INVALID_ERROR)\n      .max(20, INVALID_ERROR),\n    clr: Yup.number()\n      .required(REQUIRED_ERROR)\n      .min(-1000, INVALID_ERROR)\n      .max(1000, INVALID_ERROR),\n    acq: Yup.number()\n      .required(REQUIRED_ERROR)\n      .min(ACQ_MIN, ACQ_INVALID_ERROR)\n      .max(ACQ_MAX, ACQ_INVALID_ERROR),\n    acan: Yup.number()\n      .required(REQUIRED_ERROR)\n      .min(0, INVALID_ERROR)\n      .max(70, INVALID_ERROR),\n    acat: Yup.number()\n      .required(REQUIRED_ERROR)\n      .min(0, INVALID_ERROR)\n      .max(70, INVALID_ERROR),\n    kf: Yup.number()\n      .required(REQUIRED_ERROR)\n      .min(KF_MIN, KF_INVALID_ERROR)\n      .max(KF_MAX, KF_INVALID_ERROR),\n    cct: Yup.number()\n      .required(REQUIRED_ERROR)\n      .min(CCT_MIN, CCT_INVALID_ERROR)\n      .max(CCT_MAX, CCT_INVALID_ERROR)\n  }),\n  spectacleRefraction: Yup.object().shape({\n    sphere: Yup.number()\n      .required(REQUIRED_ERROR)\n      .min(SPHERE_MIN, SPHERE_INVALID_ERROR)\n      .max(SPHERE_MAX, SPHERE_INVALID_ERROR),\n    cylindre: Yup.number()\n      .required(REQUIRED_ERROR)\n      .min(CYLINDRE_MIN, CYLINDRE_INVALID_ERROR)\n      .max(CYLINDRE_MAX, CYLINDRE_INVALID_ERROR),\n    axis: Yup.number()\n      .required(REQUIRED_ERROR)\n      .min(0, INVALID_ERROR)\n      .max(180, INVALID_ERROR),\n    vertex: Yup.number()\n      .required(REQUIRED_ERROR)\n      .min(0, INVALID_ERROR)\n      .max(20, INVALID_ERROR)\n  })\n});\n","const FACTOR0 = -1.33756,\n  FACTOR1 = 0.9446;\n\nexport const round = (val: number, decimals: number = 2) =>\n  Math.round(val * Math.pow(10, decimals)) / Math.pow(10, decimals);\n\nexport const calcPosMeridian = (sphere: number) => {\n  return FACTOR0 + FACTOR1 * sphere;\n};\n\nexport const calcNegMeridian = ({\n  sphere,\n  cylindre\n}: {\n  sphere: number;\n  cylindre: number;\n}) => {\n  return FACTOR0 + FACTOR1 * (sphere + cylindre);\n};\n\nexport const calcIclSphere = ({\n  sphere,\n  cylindre\n}: {\n  sphere: number;\n  cylindre: number;\n}) => {\n  return round(calcNegMeridian({ sphere: sphere, cylindre: cylindre }));\n};\n\nexport const calcIclCylindre = ({\n  sphere,\n  cylindre\n}: {\n  sphere: number;\n  cylindre: number;\n}) => {\n  const posMer = calcPosMeridian(sphere),\n    negMer = calcNegMeridian({ sphere: sphere, cylindre: cylindre });\n\n  return round(posMer - negMer);\n};\n\nexport const calcIclAxis = (axis: number) => {\n  if (axis >= 0 && axis < 90) {\n    return round(axis + 90, 1);\n  }\n\n  if (axis > 90 && axis <= 180) {\n    return round(axis - 90, 1);\n  }\n\n  return round(axis, 1);\n};\n\nexport const calcIclCylindreEquivalent = ({\n  sphere,\n  cylindre\n}: {\n  sphere: number;\n  cylindre: number;\n}) => {\n  const negCylindre =\n    calcNegMeridian({ sphere: sphere, cylindre: cylindre }) -\n    calcPosMeridian(sphere);\n  return round(calcPosMeridian(sphere) + negCylindre / 2);\n};\n","import { Field, ErrorMessage, FormikState } from 'formik';\nimport { differenceInYears } from 'date-fns';\n\nimport { ICLInputs } from '.';\nimport { getClassName } from '../util';\n\nexport const calcAge = ({\n  dateOfBirth,\n  error\n}: {\n  dateOfBirth?: string;\n  error?: string;\n}): number =>\n  (dateOfBirth &&\n    !error &&\n    differenceInYears(new Date(), new Date(dateOfBirth))) ||\n  0;\n\nexport const PatientInfoFields = ({\n  errors,\n  values,\n  touched\n}: FormikState<Pick<ICLInputs, 'patient'>>) => (\n  <>\n    <h2>Patient</h2>\n    <div className=\"form-row\">\n      <div className=\"form-group col-md-4\">\n        <label htmlFor=\"fieldName\">Name</label>\n        <Field\n          name=\"patient.name\"\n          className=\"form-control\"\n          id=\"fieldName\"\n          placeholder=\"enter patient name\"\n          autoComplete=\"off\"\n        />\n      </div>\n      <div className=\"form-group col-md-2 offset-md-1\">\n        <label htmlFor=\"fieldDateOfBirth\">Date of Birth</label>\n        <Field\n          name=\"patient.dateOfBirth\"\n          className={getClassName({\n            error: errors.patient?.dateOfBirth,\n            touched: touched.patient?.dateOfBirth\n          })}\n          id=\"fieldDateOfBirth\"\n          placeholder=\"yyyy-mm-dd\"\n          autoComplete=\"off\"\n          maxLength={10}\n        />\n        <ErrorMessage\n          name=\"patient.dateOfBirth\"\n          component=\"div\"\n          className=\"invalid-feedback\"\n        />\n      </div>\n      <div className=\"form-group col-md-2\">\n        <label htmlFor=\"fieldAge\">Age</label>\n        <div className=\"input-group\">\n          <input\n            name=\"age\"\n            className=\"form-control text-right\"\n            id=\"fieldAge\"\n            disabled={true}\n            value={calcAge({\n              dateOfBirth: values.patient?.dateOfBirth,\n              error: errors.patient?.dateOfBirth\n            })}\n          />\n          <div className=\"input-group-append\">\n            <span className=\"input-group-text\" title=\"years\">\n              yr.\n            </span>\n          </div>\n        </div>\n      </div>\n      <div className=\"form-group col-md-2 offset-md-1\">\n        <label htmlFor=\"fieldEye\">Eye</label>\n        <Field\n          as=\"select\"\n          name=\"patient.eye\"\n          className=\"form-control\"\n          id=\"fieldEye\"\n        >\n          <option value=\"\">Select...</option>\n          <option value=\"left\">Left</option>\n          <option value=\"right\">Right</option>\n        </Field>\n      </div>\n    </div>\n  </>\n);\n","import React from 'react';\nimport { Formik, Form } from 'formik';\n\nimport { FieldWithUnit } from './components/FieldWithUnit';\nimport { ICLSchema } from './ICLSchema';\nimport {\n  calcIclSphere,\n  calcIclCylindre,\n  calcIclAxis,\n  calcIclCylindreEquivalent\n} from './formulas';\nimport { PatientInfoFields } from './patient/PatientInfoFields';\nimport { ICLInputs } from './patient';\n\ninterface ContainerProps {\n  initialValues: ICLInputs;\n}\n\nexport const ICLForm: React.FC<ContainerProps> = ({ initialValues }) => {\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={ICLSchema}\n      onSubmit={\n        /* istanbul ignore next */\n        () => {}\n      }\n    >\n      {({ errors, touched, values, ...otherProps }) => (\n        <Form>\n          <PatientInfoFields\n            values={values}\n            errors={errors}\n            touched={touched}\n            {...otherProps}\n          />\n          <hr />\n          <div className=\"form-row\">\n            <div className=\"col-md-4\">\n              <h2>Biometrics</h2>\n              <FieldWithUnit\n                label=\"Angle to Angle (AtA)\"\n                name=\"biometrics.ata\"\n                unit=\"mm\"\n                error={errors.biometrics?.ata}\n                touched={touched.biometrics?.ata}\n              />\n              <FieldWithUnit\n                label=\"White to White (WtW)\"\n                name=\"biometrics.wtw\"\n                unit=\"mm\"\n                error={errors.biometrics?.wtw}\n                touched={touched.biometrics?.wtw}\n              />\n              <FieldWithUnit\n                label=\"Crystaline Lens Rise (CLR)\"\n                name=\"biometrics.clr\"\n                unit=\"nm\"\n                error={errors.biometrics?.clr}\n                touched={touched.biometrics?.clr}\n              />\n              <FieldWithUnit\n                label=\"Internal Anterior Chamber Depth (ACQ)\"\n                name=\"biometrics.acq\"\n                unit=\"mm\"\n                error={errors.biometrics?.acq}\n                touched={touched.biometrics?.acq}\n              />\n              <FieldWithUnit\n                label=\"Anterior Chamber Angle nasal (ACAn)\"\n                name=\"biometrics.acan\"\n                unit=\"º\"\n                error={errors.biometrics?.acan}\n                touched={touched.biometrics?.acan}\n              />\n              <FieldWithUnit\n                label=\"Anterior Chamber Angle temporal (ACAt)\"\n                name=\"biometrics.acat\"\n                unit=\"º\"\n                error={errors.biometrics?.acat}\n                touched={touched.biometrics?.acat}\n              />\n              <FieldWithUnit\n                label=\"Keratometry - Flat Meridian (Kf)\"\n                name=\"biometrics.kf\"\n                unit=\"dpt\"\n                error={errors.biometrics?.kf}\n                touched={touched.biometrics?.kf}\n              />\n              <FieldWithUnit\n                label=\"Central Corneal Thickness (CCT)\"\n                name=\"biometrics.cct\"\n                unit=\"μm\"\n                error={errors.biometrics?.cct}\n                touched={touched.biometrics?.cct}\n              />\n            </div>\n            <div className=\"col-md-3 offset-md-1\">\n              <h2>Spectacle Refraction</h2>\n              <FieldWithUnit\n                label=\"Sphere\"\n                name=\"spectacleRefraction.sphere\"\n                unit=\"dpt\"\n                error={errors.spectacleRefraction?.sphere}\n                touched={touched.spectacleRefraction?.sphere}\n              />\n              <FieldWithUnit\n                label=\"Cylindre\"\n                name=\"spectacleRefraction.cylindre\"\n                unit=\"dpt\"\n                error={errors.spectacleRefraction?.cylindre}\n                touched={touched.spectacleRefraction?.cylindre}\n              />\n              <FieldWithUnit\n                label=\"Axis\"\n                name=\"spectacleRefraction.axis\"\n                unit=\"º\"\n                error={errors.spectacleRefraction?.axis}\n                touched={touched.spectacleRefraction?.axis}\n              />\n              <FieldWithUnit\n                label=\"Vertex\"\n                name=\"spectacleRefraction.vertex\"\n                unit=\"mm\"\n                error={errors.spectacleRefraction?.vertex}\n                touched={touched.spectacleRefraction?.vertex}\n              />\n            </div>\n            <div className=\"col-md-3 offset-md-1\">\n              <h2>ICL Power</h2>\n              <FieldWithUnit\n                label=\"Sphere\"\n                name=\"iclSphere\"\n                value={calcIclSphere({\n                  sphere: values.spectacleRefraction.sphere,\n                  cylindre: values.spectacleRefraction.cylindre\n                })}\n                unit=\"dpt\"\n                disabled={true}\n              />\n              <FieldWithUnit\n                label=\"Cylindre\"\n                name=\"iclCylindre\"\n                value={calcIclCylindre({\n                  sphere: values.spectacleRefraction.sphere,\n                  cylindre: values.spectacleRefraction.cylindre\n                })}\n                unit=\"dpt\"\n                disabled={true}\n              />\n              <FieldWithUnit\n                label=\"Axis\"\n                name=\"iclAxis\"\n                value={calcIclAxis(values.spectacleRefraction.axis)}\n                unit=\"º\"\n                disabled={true}\n              />\n              <FieldWithUnit\n                label=\"Spherical Equivalent\"\n                value={calcIclCylindreEquivalent({\n                  sphere: values.spectacleRefraction.sphere,\n                  cylindre: values.spectacleRefraction.cylindre\n                })}\n                name=\"iclSphericalEquivalent\"\n                unit=\"º\"\n                disabled={true}\n              />\n            </div>\n          </div>\n        </Form>\n      )}\n    </Formik>\n  );\n};\n","import { useState } from 'react';\n\nimport { ICLInputs } from './patient';\nimport { ICLForm } from './ICLForm';\n\nexport const ICLContainer = () => {\n  const initialValues: ICLInputs = {\n    patient: {\n      name: '',\n      dateOfBirth: '',\n      eye: 'left'\n    },\n    biometrics: {\n      ata: 0,\n      wtw: 0,\n      clr: 0,\n      acq: 0,\n      acan: 0,\n      acat: 0,\n      kf: 0,\n      cct: 0\n    },\n    spectacleRefraction: {\n      sphere: 0,\n      cylindre: 0,\n      axis: 0,\n      vertex: 0\n    }\n  };\n\n  const [val, setVal] = useState(0);\n\n  return (\n    <>\n      <nav className=\"navbar navbar-expand navbar-dark bg-dark fixed-top\">\n        <div className=\"container\">\n          <a className=\"navbar-brand\" href=\"/icl-calc\">\n            ICL Size Calc\n          </a>\n          <ul className=\"navbar-nav mr-auto\">\n            {/*\n            <li class=\"nav-item active\">\n              <a class=\"nav-link\" href=\"#home\">Home <span class=\"sr-only\">(current)</span></a>\n            </li>\n            <li class=\"nav-item\">\n              <a class=\"nav-link\" href=\"#\">Link</a>\n            </li>\n            */}\n          </ul>\n          <form className=\"form-inline\">\n            <button\n              type=\"button\"\n              className=\"btn btn-danger\"\n              onClick={() => {\n                setVal((state) => state + 1);\n              }}\n            >\n              Reset\n            </button>\n          </form>\n        </div>\n      </nav>\n      <div className=\"container\">\n        <ICLForm initialValues={initialValues} key={val} />\n      </div>\n    </>\n  );\n};\n","import { ICLContainer } from './ICLContainer';\n\nconst App = () => <ICLContainer />;\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport './App.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}