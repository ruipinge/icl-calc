{"version":3,"sources":["patient/index.ts","util.ts","components/FieldWithUnit.tsx","ICLSchema.ts","formulas.ts","patient/PatientInfoFields.tsx","ICLForm.tsx","ICLContainer.tsx","App.tsx","index.tsx"],"names":["INITIAL_VALUES","patient","name","dateOfBirth","eye","biometrics","ata","wtw","clr","acq","acan","acat","kf","cct","spectacleRefraction","sphere","cylindre","axis","vertex","getClassName","error","touched","base","invalid","valid","join","UNITS","Map","UnitSufix","unit","className","title","get","FieldWithUnit","label","placeholder","value","disabled","htmlFor","type","autoComplete","component","INVALID_ERROR","REQUIRED_ERROR","ACQ_INVALID_ERROR","KF_INVALID_ERROR","CCT_INVALID_ERROR","SPHERE_INVALID_ERROR","CYLINDRE_INVALID_ERROR","ICLSchema","Yup","shape","optional","typeError","required","min","max","FACTOR0","FACTOR1","round","val","decimals","Math","pow","calcPosMeridian","calcNegMeridian","calcIclSphere","calcIclCylindre","posMer","negMer","calcIclCylindreEquivalent","negCylindre","calcAge","differenceInYears","Date","PatientInfoFields","errors","values","id","maxLength","as","ICLForm","initialValues","validationSchema","onSubmit","otherProps","ICLContainer","useState","setVal","href","onClick","state","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fffd049b.chunk.js","sourcesContent":["export interface PatientInfo {\n  name: string;\n  dateOfBirth: string;\n  eye: 'left' | 'right';\n}\n\nexport interface Biometrics {\n  ata: number;\n  wtw: number;\n  clr: number;\n  acq: number;\n  acan: number;\n  acat: number;\n  kf: number;\n  cct: number;\n}\n\nexport interface SpectacleRefraction {\n  sphere: number;\n  cylindre: number;\n  axis: number;\n  vertex: number;\n}\n\nexport interface ICLInputs {\n  patient: PatientInfo;\n  biometrics: Biometrics;\n  spectacleRefraction: SpectacleRefraction;\n}\n\nexport const INITIAL_VALUES: ICLInputs = {\n  patient: {\n    name: '',\n    dateOfBirth: '',\n    eye: 'left'\n  },\n  biometrics: {\n    ata: 0,\n    wtw: 0,\n    clr: 0,\n    acq: 0,\n    acan: 0,\n    acat: 0,\n    kf: 0,\n    cct: 0\n  },\n  spectacleRefraction: {\n    sphere: 0,\n    cylindre: 0,\n    axis: 0,\n    vertex: 0\n  }\n};\n","export const getClassName = ({\n  error,\n  touched,\n  base = ['form-control'],\n  invalid = ['is-invalid'],\n  valid = []\n}: {\n  error?: string;\n  touched?: boolean;\n  base?: Array<string>;\n  invalid?: Array<string>;\n  valid?: Array<string>;\n}): string => [...base, ...(error && touched ? invalid : valid)].join(' ');\n","import * as React from 'react';\n\nimport { Field, ErrorMessage } from 'formik';\nimport { getClassName } from '../util';\n\ntype Unit = 'mm' | 'nm' | 'º' | 'dpt' | 'μm';\n\nconst UNITS: Map<Unit, string> = new Map([\n  ['mm', 'millimetres'],\n  ['nm', 'nanometres'],\n  ['º', 'degrees'],\n  ['dpt', 'dioptres'],\n  ['μm', 'micrometres']\n]);\n\ninterface FieldWithUnitProps {\n  label: string;\n  name: string;\n  unit: Unit;\n  touched?: boolean;\n  placeholder?: string;\n  error?: string;\n  value?: number;\n  disabled?: boolean;\n}\n\nconst UnitSufix = ({ unit }: { unit: Unit }) => (\n  <div className=\"input-group-append\">\n    <span className=\"input-group-text\" title={UNITS.get(unit)}>\n      {unit}\n    </span>\n  </div>\n);\n\nexport const FieldWithUnit: React.FC<FieldWithUnitProps> = ({\n  label,\n  name,\n  unit,\n  placeholder,\n  error,\n  touched,\n  value,\n  disabled\n}) => {\n  return (\n    <div className={'form-group row'}>\n      <label htmlFor={name + 'field'} className=\"col-sm-6 col-form-label\">\n        {label}\n      </label>\n      <div className=\"col-sm-6\">\n        <div className=\"input-group\">\n          {disabled ? (\n            <input\n              name={name}\n              value={value}\n              className=\"form-control text-right\"\n              disabled={true}\n            />\n          ) : (\n            <Field\n              type=\"number\"\n              name={name}\n              className={getClassName({\n                error: error,\n                touched: touched,\n                base: ['form-control', 'text-right']\n              })}\n              placeholder={placeholder}\n              autoComplete=\"off\"\n            />\n          )}\n          <UnitSufix unit={unit} />\n          <ErrorMessage\n            name={name}\n            component=\"div\"\n            className=\"invalid-feedback\"\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n","import * as Yup from 'yup';\n\nconst ACQ_MIN = 2.7,\n  ACQ_MAX = 6.0,\n  KF_MIN = 20,\n  KF_MAX = 70,\n  CCT_MIN = 300,\n  CCT_MAX = 700,\n  SPHERE_MIN = -25,\n  SPHERE_MAX = 0,\n  CYLINDRE_MIN = -8,\n  CYLINDRE_MAX = 0,\n  INVALID_ERROR = 'Invalid value.',\n  REQUIRED_ERROR = 'Required value.',\n  ACQ_INVALID_ERROR = `${INVALID_ERROR} [${ACQ_MIN}, ${ACQ_MAX}]`,\n  KF_INVALID_ERROR = `${INVALID_ERROR} [${KF_MIN}, ${KF_MAX}]`,\n  CCT_INVALID_ERROR = `${INVALID_ERROR} [${CCT_MIN}, ${CCT_MAX}]`,\n  SPHERE_INVALID_ERROR = `${INVALID_ERROR} [${SPHERE_MIN}, ${SPHERE_MAX}]`,\n  CYLINDRE_INVALID_ERROR = `${INVALID_ERROR} [${CYLINDRE_MIN}, ${CYLINDRE_MAX}]`;\n\nexport const ICLSchema = Yup.object().shape({\n  patient: Yup.object().shape({\n    dateOfBirth: Yup.date().optional().typeError('Invalid date. (yyyy-mm-dd)')\n  }),\n  biometrics: Yup.object().shape({\n    ata: Yup.number()\n      .required(REQUIRED_ERROR)\n      .min(0, INVALID_ERROR)\n      .max(20, INVALID_ERROR),\n    wtw: Yup.number()\n      .required(REQUIRED_ERROR)\n      .min(0, INVALID_ERROR)\n      .max(20, INVALID_ERROR),\n    clr: Yup.number()\n      .required(REQUIRED_ERROR)\n      .min(-1000, INVALID_ERROR)\n      .max(1000, INVALID_ERROR),\n    acq: Yup.number()\n      .required(REQUIRED_ERROR)\n      .min(ACQ_MIN, ACQ_INVALID_ERROR)\n      .max(ACQ_MAX, ACQ_INVALID_ERROR),\n    acan: Yup.number()\n      .required(REQUIRED_ERROR)\n      .min(0, INVALID_ERROR)\n      .max(70, INVALID_ERROR),\n    acat: Yup.number()\n      .required(REQUIRED_ERROR)\n      .min(0, INVALID_ERROR)\n      .max(70, INVALID_ERROR),\n    kf: Yup.number()\n      .required(REQUIRED_ERROR)\n      .min(KF_MIN, KF_INVALID_ERROR)\n      .max(KF_MAX, KF_INVALID_ERROR),\n    cct: Yup.number()\n      .required(REQUIRED_ERROR)\n      .min(CCT_MIN, CCT_INVALID_ERROR)\n      .max(CCT_MAX, CCT_INVALID_ERROR)\n  }),\n  spectacleRefraction: Yup.object().shape({\n    sphere: Yup.number()\n      .required(REQUIRED_ERROR)\n      .min(SPHERE_MIN, SPHERE_INVALID_ERROR)\n      .max(SPHERE_MAX, SPHERE_INVALID_ERROR),\n    cylindre: Yup.number()\n      .required(REQUIRED_ERROR)\n      .min(CYLINDRE_MIN, CYLINDRE_INVALID_ERROR)\n      .max(CYLINDRE_MAX, CYLINDRE_INVALID_ERROR),\n    axis: Yup.number()\n      .required(REQUIRED_ERROR)\n      .min(0, INVALID_ERROR)\n      .max(180, INVALID_ERROR),\n    vertex: Yup.number()\n      .required(REQUIRED_ERROR)\n      .min(0, INVALID_ERROR)\n      .max(20, INVALID_ERROR)\n  })\n});\n","const FACTOR0 = -1.33756,\n  FACTOR1 = 0.9446;\n\nexport const round = (val: number, decimals: number = 2) =>\n  Math.round(val * Math.pow(10, decimals)) / Math.pow(10, decimals);\n\nexport const calcPosMeridian = (sphere: number) => {\n  return FACTOR0 + FACTOR1 * sphere;\n};\n\nexport const calcNegMeridian = ({\n  sphere,\n  cylindre\n}: {\n  sphere: number;\n  cylindre: number;\n}) => {\n  return FACTOR0 + FACTOR1 * (sphere + cylindre);\n};\n\nexport const calcIclSphere = ({\n  sphere,\n  cylindre\n}: {\n  sphere: number;\n  cylindre: number;\n}) => {\n  return round(calcNegMeridian({ sphere: sphere, cylindre: cylindre }));\n};\n\nexport const calcIclCylindre = ({\n  sphere,\n  cylindre\n}: {\n  sphere: number;\n  cylindre: number;\n}) => {\n  const posMer = calcPosMeridian(sphere),\n    negMer = calcNegMeridian({ sphere: sphere, cylindre: cylindre });\n\n  return round(posMer - negMer);\n};\n\nexport const calcIclAxis = (axis: number) => {\n  if (axis >= 0 && axis < 90) {\n    return round(axis + 90, 1);\n  }\n\n  if (axis > 90 && axis <= 180) {\n    return round(axis - 90, 1);\n  }\n\n  return round(axis, 1);\n};\n\nexport const calcIclCylindreEquivalent = ({\n  sphere,\n  cylindre\n}: {\n  sphere: number;\n  cylindre: number;\n}) => {\n  const negCylindre =\n    calcNegMeridian({ sphere: sphere, cylindre: cylindre }) -\n    calcPosMeridian(sphere);\n  return round(calcPosMeridian(sphere) + negCylindre / 2);\n};\n","import { Field, ErrorMessage, FormikState } from 'formik';\nimport { differenceInYears } from 'date-fns';\n\nimport { ICLInputs } from '.';\nimport { getClassName } from '../util';\n\nexport const calcAge = ({\n  dateOfBirth,\n  error\n}: {\n  dateOfBirth?: string;\n  error?: string;\n}): number =>\n  (dateOfBirth &&\n    !error &&\n    differenceInYears(new Date(), new Date(dateOfBirth))) ||\n  0;\n\nexport const PatientInfoFields = ({\n  errors,\n  values,\n  touched\n}: FormikState<Pick<ICLInputs, 'patient'>>) => (\n  <>\n    <h2>Patient</h2>\n    <div className=\"form-row\">\n      <div className=\"form-group col-md-4\">\n        <label htmlFor=\"fieldName\">Name</label>\n        <Field\n          name=\"patient.name\"\n          className=\"form-control\"\n          id=\"fieldName\"\n          placeholder=\"enter patient name\"\n          autoComplete=\"off\"\n        />\n      </div>\n      <div className=\"form-group col-md-2 offset-md-1\">\n        <label htmlFor=\"fieldDateOfBirth\">Date of Birth</label>\n        <Field\n          name=\"patient.dateOfBirth\"\n          className={getClassName({\n            error: errors.patient?.dateOfBirth,\n            touched: touched.patient?.dateOfBirth\n          })}\n          id=\"fieldDateOfBirth\"\n          placeholder=\"yyyy-mm-dd\"\n          autoComplete=\"off\"\n          maxLength={10}\n        />\n        <ErrorMessage\n          name=\"patient.dateOfBirth\"\n          component=\"div\"\n          className=\"invalid-feedback\"\n        />\n      </div>\n      <div className=\"form-group col-md-2\">\n        <label htmlFor=\"fieldAge\">Age</label>\n        <div className=\"input-group\">\n          <input\n            name=\"age\"\n            className=\"form-control text-right\"\n            id=\"fieldAge\"\n            disabled={true}\n            value={calcAge({\n              dateOfBirth: values.patient?.dateOfBirth,\n              error: errors.patient?.dateOfBirth\n            })}\n          />\n          <div className=\"input-group-append\">\n            <span className=\"input-group-text\" title=\"years\">\n              yr.\n            </span>\n          </div>\n        </div>\n      </div>\n      <div className=\"form-group col-md-2 offset-md-1\">\n        <label htmlFor=\"fieldEye\">Eye</label>\n        <Field\n          as=\"select\"\n          name=\"patient.eye\"\n          className=\"form-control\"\n          id=\"fieldEye\"\n        >\n          <option value=\"\">Select...</option>\n          <option value=\"left\">Left</option>\n          <option value=\"right\">Right</option>\n        </Field>\n      </div>\n    </div>\n  </>\n);\n","import React from 'react';\nimport { Formik, Form } from 'formik';\n\nimport { FieldWithUnit } from './components/FieldWithUnit';\nimport { ICLSchema } from './ICLSchema';\nimport {\n  calcIclSphere,\n  calcIclCylindre,\n  calcIclAxis,\n  calcIclCylindreEquivalent\n} from './formulas';\nimport { PatientInfoFields } from './patient/PatientInfoFields';\nimport { ICLInputs } from './patient';\n\ninterface ContainerProps {\n  initialValues: ICLInputs;\n}\n\nexport const ICLForm: React.FC<ContainerProps> = ({ initialValues }) => {\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={ICLSchema}\n      onSubmit={\n        /* istanbul ignore next */\n        () => {}\n      }\n    >\n      {({ errors, touched, values, ...otherProps }) => (\n        <Form>\n          <PatientInfoFields\n            values={values}\n            errors={errors}\n            touched={touched}\n            {...otherProps}\n          />\n          <hr />\n          <div className=\"form-row\">\n            <div className=\"col-md-4\">\n              <h2>Biometrics</h2>\n              <FieldWithUnit\n                label=\"Angle to Angle (AtA)\"\n                name=\"biometrics.ata\"\n                unit=\"mm\"\n                error={errors.biometrics?.ata}\n                touched={touched.biometrics?.ata}\n              />\n              <FieldWithUnit\n                label=\"White to White (WtW)\"\n                name=\"biometrics.wtw\"\n                unit=\"mm\"\n                error={errors.biometrics?.wtw}\n                touched={touched.biometrics?.wtw}\n              />\n              <FieldWithUnit\n                label=\"Crystaline Lens Rise (CLR)\"\n                name=\"biometrics.clr\"\n                unit=\"nm\"\n                error={errors.biometrics?.clr}\n                touched={touched.biometrics?.clr}\n              />\n              <FieldWithUnit\n                label=\"Internal Anterior Chamber Depth (ACQ)\"\n                name=\"biometrics.acq\"\n                unit=\"mm\"\n                error={errors.biometrics?.acq}\n                touched={touched.biometrics?.acq}\n              />\n              <FieldWithUnit\n                label=\"Anterior Chamber Angle nasal (ACAn)\"\n                name=\"biometrics.acan\"\n                unit=\"º\"\n                error={errors.biometrics?.acan}\n                touched={touched.biometrics?.acan}\n              />\n              <FieldWithUnit\n                label=\"Anterior Chamber Angle temporal (ACAt)\"\n                name=\"biometrics.acat\"\n                unit=\"º\"\n                error={errors.biometrics?.acat}\n                touched={touched.biometrics?.acat}\n              />\n              <FieldWithUnit\n                label=\"Keratometry - Flat Meridian (Kf)\"\n                name=\"biometrics.kf\"\n                unit=\"dpt\"\n                error={errors.biometrics?.kf}\n                touched={touched.biometrics?.kf}\n              />\n              <FieldWithUnit\n                label=\"Central Corneal Thickness (CCT)\"\n                name=\"biometrics.cct\"\n                unit=\"μm\"\n                error={errors.biometrics?.cct}\n                touched={touched.biometrics?.cct}\n              />\n            </div>\n            <div className=\"col-md-3 offset-md-1\">\n              <h2>Spectacle Refraction</h2>\n              <FieldWithUnit\n                label=\"Sphere\"\n                name=\"spectacleRefraction.sphere\"\n                unit=\"dpt\"\n                error={errors.spectacleRefraction?.sphere}\n                touched={touched.spectacleRefraction?.sphere}\n              />\n              <FieldWithUnit\n                label=\"Cylindre\"\n                name=\"spectacleRefraction.cylindre\"\n                unit=\"dpt\"\n                error={errors.spectacleRefraction?.cylindre}\n                touched={touched.spectacleRefraction?.cylindre}\n              />\n              <FieldWithUnit\n                label=\"Axis\"\n                name=\"spectacleRefraction.axis\"\n                unit=\"º\"\n                error={errors.spectacleRefraction?.axis}\n                touched={touched.spectacleRefraction?.axis}\n              />\n              <FieldWithUnit\n                label=\"Vertex\"\n                name=\"spectacleRefraction.vertex\"\n                unit=\"mm\"\n                error={errors.spectacleRefraction?.vertex}\n                touched={touched.spectacleRefraction?.vertex}\n              />\n            </div>\n            <div className=\"col-md-3 offset-md-1\">\n              <h2>ICL Power</h2>\n              <FieldWithUnit\n                label=\"Sphere\"\n                name=\"iclSphere\"\n                value={calcIclSphere({\n                  sphere: values.spectacleRefraction.sphere,\n                  cylindre: values.spectacleRefraction.cylindre\n                })}\n                unit=\"dpt\"\n                disabled={true}\n              />\n              <FieldWithUnit\n                label=\"Cylindre\"\n                name=\"iclCylindre\"\n                value={calcIclCylindre({\n                  sphere: values.spectacleRefraction.sphere,\n                  cylindre: values.spectacleRefraction.cylindre\n                })}\n                unit=\"dpt\"\n                disabled={true}\n              />\n              <FieldWithUnit\n                label=\"Axis\"\n                name=\"iclAxis\"\n                value={calcIclAxis(values.spectacleRefraction.axis)}\n                unit=\"º\"\n                disabled={true}\n              />\n              <FieldWithUnit\n                label=\"Spherical Equivalent\"\n                value={calcIclCylindreEquivalent({\n                  sphere: values.spectacleRefraction.sphere,\n                  cylindre: values.spectacleRefraction.cylindre\n                })}\n                name=\"iclSphericalEquivalent\"\n                unit=\"º\"\n                disabled={true}\n              />\n            </div>\n          </div>\n        </Form>\n      )}\n    </Formik>\n  );\n};\n","import { useState } from 'react';\n\nimport { INITIAL_VALUES } from './patient';\nimport { ICLForm } from './ICLForm';\n\nexport const ICLContainer = () => {\n  const [val, setVal] = useState(0);\n\n  return (\n    <>\n      <nav className=\"navbar navbar-expand navbar-dark bg-dark fixed-top\">\n        <div className=\"container\">\n          <a className=\"navbar-brand\" href=\"/icl-calc\">\n            ICL Size Calc\n          </a>\n          <ul className=\"navbar-nav mr-auto\">\n            {/*\n            <li class=\"nav-item active\">\n              <a class=\"nav-link\" href=\"#home\">Home <span class=\"sr-only\">(current)</span></a>\n            </li>\n            <li class=\"nav-item\">\n              <a class=\"nav-link\" href=\"#\">Link</a>\n            </li>\n            */}\n          </ul>\n          <form className=\"form-inline\">\n            <button\n              type=\"button\"\n              className=\"btn btn-danger\"\n              onClick={() => {\n                setVal((state) => state + 1);\n              }}\n            >\n              Reset\n            </button>\n          </form>\n        </div>\n      </nav>\n      <div className=\"container\">\n        <ICLForm initialValues={INITIAL_VALUES} key={val} />\n      </div>\n    </>\n  );\n};\n","import { ICLContainer } from './ICLContainer';\n\nconst App = () => <ICLContainer />;\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport './App.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}